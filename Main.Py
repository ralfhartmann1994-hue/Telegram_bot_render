# Main.py
# مُعاد كتابة لتصحيح سلوك الواجهة (أزرار، مغادرة، إبلاغ، تعريف الشريك) وتجهيز نقاط/إحالات
# تاريخ: 2025-09
import os
import time
import traceback
from flask import Flask, request
import telebot
from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    Message,
)

# ---------- استيراد ملفات المشروع (fallbacks متاحة) ----------
import storage
from storage import users, load_users, save_users

# profile manager
import profile_manager as ProfileManager
from profile_manager import (
    ensure_user,
    set_user_name,
    set_user_age,
    set_user_gender,
    profile_text,
    start_history,
    append_history,
    end_session,
)

# Matchmaking
try:
    from Matchmaking import add_to_wait, try_match, start_timeout_watcher, remove_from_wait
except Exception:
    def add_to_wait(*args, **kwargs):
        raise RuntimeError("Matchmaking.add_to_wait unavailable")
    def try_match(*args, **kwargs):
        return None
    def start_timeout_watcher(bot=None):
        return
    def remove_from_wait(*args, **kwargs):
        return

# Moderation
try:
    from Moderation import is_muted, apply_respect, review_history_and_penalize, check_message_safe
except Exception:
    def is_muted(uid): return False
    def apply_respect(uid, text): return
    def review_history_and_penalize(uid, pid, history): return None
    def check_message_safe(text): return True

# messages + delayed_send (fallbacks)
try:
    from messages import delayed_send, get_welcome_message, WELCOME, HELP, SEARCHING, NO_MATCH, INTRO_PARTNER, LEAVE_CONFIRM, LEAVE_TOO_SOON, LEFT_YOU, LEFT_PARTNER, REPORT_CONFIRM, REPORT_OK, REPORT_RESULT, MUTED, BANNED
except Exception:
    def delayed_send(bot_obj, chat_id, text, **kwargs):
        bot_obj.send_message(chat_id, text, **kwargs)
    def get_welcome_message(topic_key="START"):
        return "👋 أهلاً بك."
    WELCOME = "مرحباً!"
    HELP = "مساعدة: استخدم الأزرار."
    SEARCHING = "🔎 جاري البحث..."
    NO_MATCH = "لم نجد شريكًا الآن."
    INTRO_PARTNER = "لقد تمّ ربطك بشريك — ابدأ المحادثة!"
    LEAVE_CONFIRM = "هل أنت متأكد أنك تريد المغادرة؟"
    LEAVE_TOO_SOON = "لا يمكنك المغادرة الآن. انتظر {remain} ثانية."
    LEFT_YOU = "شريكك غادر المحادثة."
    LEFT_PARTNER = "لقد غادرت الدردشة."
    REPORT_CONFIRM = "هل تريد تأكيد الإبلاغ؟"
    REPORT_OK = "تم استلام الإبلاغ."
    REPORT_RESULT = "نتيجة الإبلاغ: {lines} أسطر."
    MUTED = "محظور مؤقتًا. تبقى {left} ثانية."
    BANNED = "لقد تم حظرك من النظام."

# Bad_word (إن وُجد)
try:
    from Bad_word import contains_bad_word, censor_text
except Exception:
    def contains_bad_word(text):
        return False
    def censor_text(text):
        return text

# ---------- إعداد البوت ----------
TOKEN = os.environ.get("TELEGRAM_TOKEN") or os.environ.get("BOT_TOKEN") or getattr(__import__("config"), "TOKEN", None) if os.path.exists("config.py") else None
if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN / BOT_TOKEN غير معرف في environment أو config.TOKEN")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# ---------- ثوابت حالات ----------
STATE_REGISTER_NAME = "REGISTER_NAME"
STATE_REGISTER_GENDER = "REGISTER_GENDER"
STATE_REGISTER_AGE = "REGISTER_AGE"
STATE_EDIT_NAME = "EDIT_NAME"
STATE_EDIT_AGE = "EDIT_AGE"
STATE_CHOOSE_TOPIC = "CHOOSE_TOPIC"
STATE_CHOOSE_TARGET_GENDER = "CHOOSE_TARGET_GENDER"
STATE_SEARCHING = "SEARCHING"
STATE_CONFIRM_LEAVE = "CONFIRM_LEAVE"
STATE_CONFIRM_REPORT = "CONFIRM_REPORT"

# ---------- كيبوردات مساعدة ----------
def main_menu(in_chat: bool = False) -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("👤 ملفي"))
    kb.add(KeyboardButton("✏️ تعديل الاسم"), KeyboardButton("🎂 تعديل العمر"))
    kb.add(KeyboardButton("🔍 البحث عن دردشة"))
    if in_chat:
        kb.add(KeyboardButton("🚨 إبلاغ"), KeyboardButton("🚪 مغادرة الدردشة"))
    # زر المساعدة أصبح "تواصل مع الدعم"
    kb.add(KeyboardButton("تواصل مع الدعم"))
    return kb

def topics_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    try:
        from config import TOPICS
        for i in range(0, len(TOPICS), 2):
            row = [KeyboardButton(TOPICS[i])]
            if i+1 < len(TOPICS):
                row.append(KeyboardButton(TOPICS[i+1]))
            kb.add(*row)
    except Exception:
        kb.add(KeyboardButton("عام"))
    return kb

def gender_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for g in getattr(__import__("config"), "GENDERS", ["ذكر", "أنثى"]):
        kb.add(KeyboardButton(g))
    return kb

def target_gender_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for tg in getattr(__import__("config"), "TARGET_GENDERS", ["👨 رجل", "👩 امرأة"]):
        kb.add(KeyboardButton(tg))
    return kb

def yes_no_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("نعم ✅"), KeyboardButton("لا ❌"))
    return kb

# ---------- تحميل المستخدمين ----------
try:
    load_users()
except Exception as e:
    print(f"[LOAD_USERS ERROR] {e}")

# ---------- امتدادات لضمان الحقول الأساسية (نقاط، إحالة) ----------
def ensure_user_extended(uid: int):
    """
    نستخدم ensure_user من profile_manager ثم نضمن الحقول الإضافية المطلوبة
    دون تغيير دوال profile الأصلية.
    """
    u = ensure_user(uid)
    # حقول جاهزة للنقاط والإحالات (قابلة للتفعيل لاحقًا)
    if "points" not in u:
        u["points"] = u.get("points", 100)  # المستخدم الجديد يحصل 100 نقطة
    if "referrer" not in u:
        u["referrer"] = u.get("referrer", None)
    if "referral_code" not in u:
        u["referral_code"] = u.get("referral_code", None)
    # state default
    if "state" not in u:
        u["state"] = None
    # ensure basic fields exist to avoid KeyError
    u.setdefault("partner", None)
    u.setdefault("history", [])
    save_users()
    return u

# ---------- دوال مساعدة ----------
def update_user(uid: int, updates: dict):
    try:
        u = ensure_user(uid)
        u.update(updates)
        save_users()
    except Exception as e:
        print(f"[UPDATE_USER ERROR] {e} | uid={uid} | updates={updates}")
        print(traceback.format_exc())

def safe_send(uid: int, text: str, **kwargs):
    try:
        delayed_send(bot, uid, text, **kwargs)
    except Exception:
        try:
            bot.send_message(uid, text, **kwargs)
        except Exception as e:
            print(f"[SEND ERROR] {e} | uid={uid} | preview={str(text)[:120]}")

def remove_kb(uid: int, text: str = None):
    """أرسل رسالة واخفي الكيبورد (لمنع زر القائمة من البقاء ظاهراً داخل المحادثة)"""
    try:
        if text:
            safe_send(uid, text, reply_markup=ReplyKeyboardRemove())
        else:
            safe_send(uid, " ", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        print(f"[remove_kb ERROR] {e}")

def partner_profile_text(pid: int):
    """إنشئ نص تعريف الشريك (اسم، عمر، جنس، احترام)"""
    try:
        p = users.get(pid)
        if not p:
            return "معلومات الشريك غير متوفرة."
        # استخدم profile_text لكنه يعرض اسم المستخدم نفسه؛ نريد صيغة مختصرة
        name = p.get("name") or "غير محدد"
        age = p.get("age") or "غير محدد"
        gender = p.get("gender") or "غير محدد"
        respect = p.get("respect", 80)
        return f"👤 <b>تم إيجاد شريك لك</b>\n• الاسم: {name}\n• العمر: {age}\n• الجنس: {gender}\n• الاحترام: ⭐ {respect}"
    except Exception as e:
        print(f"[partner_profile_text ERROR] {e}")
        return "معلومات الشريك غير متوفرة."

# ---------- المعالجات ----------

@bot.message_handler(commands=["start"])
def cmd_start(m: Message):
    uid = m.from_user.id
    ensure_user_extended(uid)
    print(f"[START] user={uid}")
    try:
        safe_send(uid, get_welcome_message("START"))
    except Exception as e:
        print(f"[WELCOME SEND ERROR] {e}")
    update_user(uid, {"state": STATE_REGISTER_NAME})
    # أرسل سؤال الاسم مع إزالة أي كيبورد سابق
    safe_send(uid, "✏️ ما اسمك؟", reply_markup=ReplyKeyboardRemove())

@bot.message_handler(commands=["profile"])
def cmd_profile(m: Message):
    uid = m.from_user.id
    ensure_user_extended(uid)
    u = users[uid]
    safe_send(uid, profile_text(u), reply_markup=main_menu(in_chat=bool(u.get("partner"))))

@bot.message_handler(commands=["help", "support"])
def cmd_support(m: Message):
    uid = m.from_user.id
    ensure_user_extended(uid)
    # زِدنا زر "تواصل مع الدعم" في الواجهة، لكن كأمر نعيد رسالة الدعم هنا
    support_handle = "@MAA2857"
    safe_send(uid, f"للتواصل مع الدعم تواصل عبر: {support_handle}\nأو أرسل رسالة هنا وسنقوم بالرد إن أمكن.")

@bot.message_handler(commands=["search", "chat", "find"])
def cmd_search(m: Message):
    uid = m.from_user.id
    handle_search_request(uid)

@bot.message_handler(commands=["leave", "exit"])
def cmd_leave(m: Message):
    uid = m.from_user.id
    handle_leave_request(uid)

@bot.message_handler(commands=["report"])
def cmd_report(m: Message):
    uid = m.from_user.id
    ensure_user_extended(uid)
    update_user(uid, {"state": STATE_CONFIRM_REPORT})
    safe_send(uid, REPORT_CONFIRM, reply_markup=yes_no_menu())

# التقاط أي نص (بما في ذلك أزرار لوحة المفاتيح)
@bot.message_handler(func=lambda msg: True, content_types=["text"])
def on_text(m: Message):
    uid = m.from_user.id
    txt = (m.text or "").strip()
    ensure_user_extended(uid)
    u = users[uid]
    if u.get("banned_full"):
        return

    state = u.get("state") or ""
    print(f"[MSG] from={uid} state={state} text={txt[:120]}")

    # --- قبل أي شيء: اعترض أزرار مهمة حتى لو كُنّا داخل محادثة ---
    # زر "تواصل مع الدعم"
    if txt == "تواصل مع الدعم":
        support_handle = "@MAA2857"
        safe_send(uid, f"للتواصل مع الدعم: {support_handle}\nأخبرنا بالمشكلة وسنعاود الاتصال.")
        return

    # زر "🚪 مغادرة الدردشة" أو "🚨 إبلاغ" يجب أن يعالج محلياً، لا يمرّر للشريك
    if txt == "🚪 مغادرة الدردشة":
        # استدعي مسار المغادرة كما لو أنه أمر
        handle_leave_request(uid)
        return

    if txt == "🚨 إبلاغ":
        # استدعي مسار الإبلاغ
        update_user(uid, {"state": STATE_CONFIRM_REPORT})
        safe_send(uid, REPORT_CONFIRM, reply_markup=yes_no_menu())
        return

    # --- حالات التسجيل (name -> gender -> age) ---
    if state == STATE_REGISTER_NAME:
        return handle_register_name(uid, txt)
    if state == STATE_REGISTER_GENDER:
        return handle_register_gender(uid, txt)
    if state == STATE_REGISTER_AGE:
        return handle_register_age(uid, txt)

    # --- تعديل ---
    if state == STATE_EDIT_NAME:
        return handle_edit_name(uid, txt)
    if state == STATE_EDIT_AGE:
        return handle_edit_age(uid, txt)

    # --- اختيار موضوع وجنس هدف ---
    if state == STATE_CHOOSE_TOPIC:
        return handle_topic_selection(uid, txt)
    if state == STATE_CHOOSE_TARGET_GENDER:
        return handle_target_gender(uid, txt)

    # --- تأكيد مغادرة / إبلاغ (نعم/لا) ---
    if state == STATE_CONFIRM_LEAVE:
        return handle_leave_confirm(uid, u, txt)
    if state == STATE_CONFIRM_REPORT:
        return handle_report_text_confirm(uid, u, txt)

    # --- أوامر من القائمة الرئيسية ---
    if txt == "👤 ملفي":
        safe_send(uid, profile_text(u), reply_markup=main_menu(in_chat=bool(u.get("partner"))))
        return

    if txt == "✏️ تعديل الاسم":
        update_user(uid, {"state": STATE_EDIT_NAME})
        safe_send(uid, "✏️ أرسل الاسم الجديد:", reply_markup=ReplyKeyboardRemove())
        return

    if txt == "🎂 تعديل العمر":
        update_user(uid, {"state": STATE_EDIT_AGE})
        safe_send(uid, "🎂 أرسل العمر الجديد (10–120):", reply_markup=ReplyKeyboardRemove())
        return

    if txt == "🆘 مساعدة":
        # احتفظت بدعم قديم - لكن زر الآن هو "تواصل مع الدعم"
        support_handle = "@MAA2857"
        safe_send(uid, f"تواصل مع الدعم: {support_handle}")
        return

    if txt == "🔍 البحث عن دردشة":
        handle_search_request(uid)
        return

    # --- إذا المستخدم داخل دردشة: اعترض الأزرار أعلاه أولاً ثم مرّر باقي النصوص ---
    if u.get("partner"):
        return handle_chat_message(uid, txt, u)

    # --- افتراضي ---
    safe_send(uid, "❔ لم أفهم. استخدم الأزرار بالأسفل.", reply_markup=main_menu(in_chat=False))

# ----------------------
# دوال التسجيل خطوة بخطوة
# ----------------------
def handle_register_name(uid: int, txt: str):
    try:
        ok = set_user_name(uid, txt)
        if not ok:
            safe_send(uid, "❌ الاسم غير صالح. استخدم 2–30 حرفًا (حروف ومسافات فقط). حاول مرة أخرى:")
            return
        update_user(uid, {"state": STATE_REGISTER_GENDER})
        safe_send(uid, f"✅ تم حفظ الاسم: {users[uid].get('name')}")
        safe_send(uid, "💡 اختر جنسك (مرة واحدة):", reply_markup=gender_menu())
    except Exception as e:
        print(f"[handle_register_name ERROR] {e}")
        print(traceback.format_exc())
        safe_send(uid, "❌ حدث خطأ أثناء حفظ الاسم. حاول مرة أخرى.")

def handle_register_gender(uid: int, txt: str):
    try:
        txt = txt.strip()
        valid = getattr(__import__("config"), "GENDERS", ["ذكر", "أنثى"])
        if txt not in valid:
            safe_send(uid, "❌ اختر: ذكر / أنثى", reply_markup=gender_menu())
            return
        ok = set_user_gender(uid, txt)
        if not ok:
            safe_send(uid, "❌ اختيار غير صالح. اختر: ذكر / أنثى", reply_markup=gender_menu())
            return
        update_user(uid, {"state": STATE_REGISTER_AGE})
        safe_send(uid, f"✅ تم حفظ الجنس: {txt}")
        safe_send(uid, "🎂 ما عمرك؟ (10–120)", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        print(f"[handle_register_gender ERROR] {e}")
        print(traceback.format_exc())
        safe_send(uid, "❌ حدث خطأ أثناء حفظ الجنس. حاول مرة أخرى.")

def handle_register_age(uid: int, txt: str):
    try:
        ok = set_user_age(uid, txt)
        if not ok:
            safe_send(uid, "❌ العمر غير صالح. أرسل رقمًا بين 10 و120:")
            return
        update_user(uid, {"state": None})
        safe_send(uid, f"✅ تم حفظ العمر: {users[uid].get('age')}")
        safe_send(uid, "🎉 تم إعداد ملفك الشخصي بنجاح! يمكنك الآن استخدام القائمة:", reply_markup=main_menu(in_chat=False))
    except Exception as e:
        print(f"[handle_register_age ERROR] {e}")
        print(traceback.format_exc())
        safe_send(uid, "❌ حدث خطأ أثناء حفظ العمر. حاول مرة أخرى.")

# ---------------------------
# دوال التعديل (الاسم/العمر)
# ---------------------------
def handle_edit_name(uid: int, txt: str):
    try:
        ok = set_user_name(uid, txt)
        if not ok:
            safe_send(uid, "❌ الاسم غير صالح. حاول مجددًا:")
            return
        update_user(uid, {"state": None})
        safe_send(uid, f"✅ تم تحديث الاسم إلى: {users[uid].get('name')}", reply_markup=main_menu(in_chat=False))
    except Exception as e:
        print(f"[handle_edit_name ERROR] {e}")
        print(traceback.format_exc())
        safe_send(uid, "❌ حدث خطأ أثناء تعديل الاسم.")

def handle_edit_age(uid: int, txt: str):
    try:
        ok = set_user_age(uid, txt)
        if not ok:
            safe_send(uid, "❌ العمر غير صالح. أرسل رقمًا بين 10 و120:")
            return
        update_user(uid, {"state": None})
        safe_send(uid, f"✅ تم تحديث العمر إلى: {users[uid].get('age')}", reply_markup=main_menu(in_chat=False))
    except Exception as e:
        print(f"[handle_edit_age ERROR] {e}")
        print(traceback.format_exc())
        safe_send(uid, "❌ حدث خطأ أثناء تعديل العمر.")

# ---------------------------
# البحث والمطابقة (مع تعريف الشريك)
# ---------------------------
def handle_search_request(uid: int):
    ensure_user_extended(uid)
    u = users[uid]
    if u.get("partner"):
        safe_send(uid, "⚠️ أنت بالفعل في دردشة!", reply_markup=main_menu(in_chat=True))
        return
    update_user(uid, {"state": STATE_CHOOSE_TOPIC})
    safe_send(uid, "اختر موضوع النقاش:", reply_markup=topics_menu())

def handle_topic_selection(uid: int, txt: str):
    txt = txt.strip()
    try:
        from config import TOPICS
    except Exception:
        TOPICS = ["عام"]
    if txt not in TOPICS:
        safe_send(uid, "❌ اختر موضوعًا صالحًا من القائمة.", reply_markup=topics_menu())
        return
    update_user(uid, {"topic": txt, "state": STATE_CHOOSE_TARGET_GENDER})
    safe_send(uid, f"تم اختيار الموضوع: {txt}\nالآن اختر جنس الطرف الذي تريده:", reply_markup=target_gender_menu())

def handle_target_gender(uid: int, txt: str):
    txt = txt.strip()
    valid = getattr(__import__("config"), "TARGET_GENDERS", ["👨 رجل", "👩 امرأة"])
    if txt not in valid:
        safe_send(uid, f"❌ اختر: {' / '.join(valid)}", reply_markup=target_gender_menu())
        return

    # تحويل لتمثيل داخلي
    if "رجل" in txt:
        target = "male"
    elif "امرأة" in txt or "امرأ" in txt:
        target = "female"
    else:
        target = "any"

    u = users[uid]
    topic = u.get("topic")
    update_user(uid, {"target_gender": target, "state": STATE_SEARCHING})

    # أضف إلى الانتظار وجرب المطابقة
    try:
        add_to_wait(topic, uid, target)
    except Exception:
        try:
            add_to_wait(uid, topic, target)
        except Exception as e:
            print(f"[add_to_wait ERROR] {e}")

    # حاول المطابقة
    partner = None
    try:
        partner = try_match(uid, topic)
    except Exception:
        try:
            partner = try_match(uid, topic, target)
        except Exception as e:
            print(f"[try_match ERROR] {e}")

    if partner:
        try:
            pid = int(partner)
            # ضبط شركاء بعضهما
            update_user(uid, {"partner": pid, "state": None, "chat_started_at": time.time()})
            update_user(pid, {"partner": uid, "state": None, "chat_started_at": time.time()})
            # تجهيز history
            try:
                start_history(users[uid])
                start_history(users[pid])
            except Exception:
                pass
            # أرسل تعريف الشريك لكلا الطرفين ثم أزل لوحة المفاتيح لمنع الإرسال كسجل
            safe_send(uid, partner_profile_text(pid), reply_markup=ReplyKeyboardRemove())
            safe_send(pid, partner_profile_text(uid), reply_markup=ReplyKeyboardRemove())
            # بعد ذلك أعرض لوحة داخل الدردشة مع أزرار مناسبة (in_chat=True)
            safe_send(uid, INTRO_PARTNER, reply_markup=main_menu(in_chat=True))
            safe_send(pid, INTRO_PARTNER, reply_markup=main_menu(in_chat=True))
        except Exception as e:
            print(f"[MATCH SETUP ERROR] {e}")
    else:
        safe_send(uid, NO_MATCH)

    # شغّل watcher للتايم آوت إن وُجد
    try:
        start_timeout_watcher(bot)
    except Exception:
        try:
            start_timeout_watcher()
        except Exception as e:
            print(f"[start_timeout_watcher ERROR] {e}")

# ---------------------------
# مغادرة الدردشة وتهيئة المسار
# ---------------------------
def handle_leave_request(uid: int):
    ensure_user_extended(uid)
    u = users[uid]
    started = u.get("chat_started_at") or 0
    elapsed = time.time() - started
    leave_delay = getattr(__import__("config"), "LEAVE_DELAY", 30) if os.path.exists("config.py") else 30
    if elapsed < leave_delay:
        safe_send(uid, LEAVE_TOO_SOON.format(remain=int(leave_delay - elapsed)))
        return
    update_user(uid, {"state": STATE_CONFIRM_LEAVE})
    safe_send(uid, LEAVE_CONFIRM, reply_markup=yes_no_menu())

def handle_leave_confirm(uid: int, u: dict, txt: str):
    if txt == "نعم ✅":
        pid = u.get("partner")
        if pid:
            try:
                # end_session أو end_session(users[uid], users[pid]) حسب implementation
                try:
                    end_session(users[uid], users[pid])
                except Exception:
                    end_session(users.get(uid), users.get(pid))
            except Exception:
                pass
            update_user(uid, {"partner": None, "state": None, "chat_started_at": None})
            update_user(pid, {"partner": None, "state": None, "chat_started_at": None})
            safe_send(uid, "لقد غادرت الدردشة.", reply_markup=main_menu(in_chat=False))
            try:
                safe_send(pid, "شريكك غادر الدردشة.", reply_markup=main_menu(in_chat=False))
            except Exception:
                pass
        else:
            update_user(uid, {"state": None})
            safe_send(uid, "لم يتم العثور على شريك حالي.")
    elif txt == "لا ❌":
        update_user(uid, {"state": None})
        safe_send(uid, "تم الإلغاء. تابع الدردشة 👌")
    else:
        safe_send(uid, "اختر: نعم ✅ / لا ❌", reply_markup=yes_no_menu())

# ---------------------------
# تأكيد الإبلاغ
# ---------------------------
def handle_report_text_confirm(uid: int, u: dict, txt: str):
    if txt == "نعم ✅":
        pid = u.get("partner")
        try:
            result = review_history_and_penalize(uid, pid, u.get("history", []))
        except Exception as e:
            print(f"[review_history_and_penalize ERROR] {e}")
            result = None
        update_user(uid, {"state": None})
        safe_send(uid, REPORT_OK)
        if result:
            safe_send(uid, REPORT_RESULT.format(lines=result[0], respect=u.get("respect", "—")))
    elif txt == "لا ❌":
        update_user(uid, {"state": None})
        safe_send(uid, "تم الإلغاء. شكراً لحرصك.")
    else:
        safe_send(uid, "اختر: نعم ✅ / لا ❌", reply_markup=yes_no_menu())
        return
    # بعد الإبلاغ اعرض زر مغادرة لتجنب بقاء الأزرار
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("🚪 مغادرة الدردشة"))
    safe_send(uid, "هل تريد الآن مغادرة الدردشة؟", reply_markup=kb)

# ---------------------------
# تمرير الرسائل بين الشركاء (مع اعتراض أزرار)
# ---------------------------
def handle_chat_message(uid: int, txt: str, u: dict):
    # إذا كانت الرسالة من النوع زر سبق اعتراضه في on_text لكن احتياطاً نتحقق أيضاً هنا
    if txt in ("🚪 مغادرة الدردشة", "🚨 إبلاغ", "تواصل مع الدعم"):
        # إعادة التوجيه إلى on_text سيقوم بمعالجتها، لذلك فقط رجوع
        return

    if is_muted(uid):
        safe_send(uid, MUTED.format(left=60))
        return

    try:
        if contains_bad_word(txt):
            txt_to_send = censor_text(txt)
            safe_send(uid, "⚠️ تم تعديل رسالتك لاحتوائها على كلمات غير لائقة.")
        else:
            txt_to_send = txt
    except Exception:
        txt_to_send = txt

    try:
        apply_respect(uid, txt_to_send)
    except Exception:
        pass

    try:
        append_history(uid, txt_to_send)
    except Exception:
        pass

    pid = u.get("partner")
    if not pid or pid not in users:
        update_user(uid, {"partner": None})
        safe_send(uid, "لا يوجد شريك حالي — عد إلى القائمة.", reply_markup=main_menu(in_chat=False))
        return

    try:
        # أرسل للآخر مع ظاهر يميزه
        bot.send_message(pid, f"💬 {txt_to_send}")
    except Exception as e:
        print(f"[SEND TO PARTNER ERROR] {e}")
        safe_send(uid, "حدث خطأ أثناء إرسال الرسالة إلى الشريك.")

# ---------------------------
# Webhook endpoint (Flask)
# ---------------------------
@app.route(f"/{getattr(__import__('config'), 'WEBHOOK_PATH', 'webhook')}", methods=["POST"])
def webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print(f"[WEBHOOK PROCESS ERROR] {e}\n{traceback.format_exc()}")
    return "", 200

def set_webhook():
    url = os.environ.get("WEBHOOK_URL") or getattr(__import__("config"), "WEBHOOK_URL", None) if os.path.exists("config.py") else None
    path = getattr(__import__("config"), "WEBHOOK_PATH", "webhook") if os.path.exists("config.py") else "webhook"
    if not url:
        print("[WEBHOOK] WEBHOOK_URL not set; skipping webhook setup")
        return
    try:
        bot.remove_webhook()
    except Exception:
        pass
    bot.set_webhook(f"{url}/{path}")
    print(f"[WEBHOOK] Set to {url}/{path}")

# تشغيل watcher للتايم آوت
try:
    start_timeout_watcher(bot)
except Exception:
    try:
        start_timeout_watcher()
    except Exception:
        pass

# ---------- نقطة التشغيل ----------
if __name__ == "__main__":
    try:
        load_users()
    except Exception as e:
        print(f"[LOAD_USERS ERROR] {e}")
    try:
        set_webhook()
    except Exception as e:
        print(f"[WEBHOOK ERROR] {e}")
    port = int(os.environ.get("PORT", getattr(__import__("config"), "PORT", 5000)) if os.path.exists("config.py") else int(os.environ.get("PORT", 5000)))
    print(f"[RUN] Webhook listening on port {port}…")
    app.run(host="0.0.0.0", port=port)
